// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/test/v1/review.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestReviewService_CreateTestReview_FullMethodName = "/terminator.api.test.v1.TestReviewService/CreateTestReview"
	TestReviewService_UpdateTestReview_FullMethodName = "/terminator.api.test.v1.TestReviewService/UpdateTestReview"
	TestReviewService_DeleteTestReview_FullMethodName = "/terminator.api.test.v1.TestReviewService/DeleteTestReview"
	TestReviewService_GetTestReview_FullMethodName    = "/terminator.api.test.v1.TestReviewService/GetTestReview"
	TestReviewService_ListTestReview_FullMethodName   = "/terminator.api.test.v1.TestReviewService/ListTestReview"
)

// TestReviewServiceClient is the client API for TestReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestReviewServiceClient interface {
	CreateTestReview(ctx context.Context, in *CreateTestReviewRequest, opts ...grpc.CallOption) (*CreateTestReviewReply, error)
	UpdateTestReview(ctx context.Context, in *UpdateTestReviewRequest, opts ...grpc.CallOption) (*UpdateTestReviewReply, error)
	DeleteTestReview(ctx context.Context, in *DeleteTestReviewRequest, opts ...grpc.CallOption) (*DeleteTestReviewReply, error)
	GetTestReview(ctx context.Context, in *GetTestReviewRequest, opts ...grpc.CallOption) (*GetTestReviewReply, error)
	ListTestReview(ctx context.Context, in *ListTestReviewRequest, opts ...grpc.CallOption) (*ListTestReviewReply, error)
}

type testReviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestReviewServiceClient(cc grpc.ClientConnInterface) TestReviewServiceClient {
	return &testReviewServiceClient{cc}
}

func (c *testReviewServiceClient) CreateTestReview(ctx context.Context, in *CreateTestReviewRequest, opts ...grpc.CallOption) (*CreateTestReviewReply, error) {
	out := new(CreateTestReviewReply)
	err := c.cc.Invoke(ctx, TestReviewService_CreateTestReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testReviewServiceClient) UpdateTestReview(ctx context.Context, in *UpdateTestReviewRequest, opts ...grpc.CallOption) (*UpdateTestReviewReply, error) {
	out := new(UpdateTestReviewReply)
	err := c.cc.Invoke(ctx, TestReviewService_UpdateTestReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testReviewServiceClient) DeleteTestReview(ctx context.Context, in *DeleteTestReviewRequest, opts ...grpc.CallOption) (*DeleteTestReviewReply, error) {
	out := new(DeleteTestReviewReply)
	err := c.cc.Invoke(ctx, TestReviewService_DeleteTestReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testReviewServiceClient) GetTestReview(ctx context.Context, in *GetTestReviewRequest, opts ...grpc.CallOption) (*GetTestReviewReply, error) {
	out := new(GetTestReviewReply)
	err := c.cc.Invoke(ctx, TestReviewService_GetTestReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testReviewServiceClient) ListTestReview(ctx context.Context, in *ListTestReviewRequest, opts ...grpc.CallOption) (*ListTestReviewReply, error) {
	out := new(ListTestReviewReply)
	err := c.cc.Invoke(ctx, TestReviewService_ListTestReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestReviewServiceServer is the server API for TestReviewService service.
// All implementations must embed UnimplementedTestReviewServiceServer
// for forward compatibility
type TestReviewServiceServer interface {
	CreateTestReview(context.Context, *CreateTestReviewRequest) (*CreateTestReviewReply, error)
	UpdateTestReview(context.Context, *UpdateTestReviewRequest) (*UpdateTestReviewReply, error)
	DeleteTestReview(context.Context, *DeleteTestReviewRequest) (*DeleteTestReviewReply, error)
	GetTestReview(context.Context, *GetTestReviewRequest) (*GetTestReviewReply, error)
	ListTestReview(context.Context, *ListTestReviewRequest) (*ListTestReviewReply, error)
	mustEmbedUnimplementedTestReviewServiceServer()
}

// UnimplementedTestReviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestReviewServiceServer struct {
}

func (UnimplementedTestReviewServiceServer) CreateTestReview(context.Context, *CreateTestReviewRequest) (*CreateTestReviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestReview not implemented")
}
func (UnimplementedTestReviewServiceServer) UpdateTestReview(context.Context, *UpdateTestReviewRequest) (*UpdateTestReviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestReview not implemented")
}
func (UnimplementedTestReviewServiceServer) DeleteTestReview(context.Context, *DeleteTestReviewRequest) (*DeleteTestReviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestReview not implemented")
}
func (UnimplementedTestReviewServiceServer) GetTestReview(context.Context, *GetTestReviewRequest) (*GetTestReviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestReview not implemented")
}
func (UnimplementedTestReviewServiceServer) ListTestReview(context.Context, *ListTestReviewRequest) (*ListTestReviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestReview not implemented")
}
func (UnimplementedTestReviewServiceServer) mustEmbedUnimplementedTestReviewServiceServer() {}

// UnsafeTestReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestReviewServiceServer will
// result in compilation errors.
type UnsafeTestReviewServiceServer interface {
	mustEmbedUnimplementedTestReviewServiceServer()
}

func RegisterTestReviewServiceServer(s grpc.ServiceRegistrar, srv TestReviewServiceServer) {
	s.RegisterService(&TestReviewService_ServiceDesc, srv)
}

func _TestReviewService_CreateTestReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReviewServiceServer).CreateTestReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReviewService_CreateTestReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReviewServiceServer).CreateTestReview(ctx, req.(*CreateTestReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestReviewService_UpdateTestReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReviewServiceServer).UpdateTestReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReviewService_UpdateTestReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReviewServiceServer).UpdateTestReview(ctx, req.(*UpdateTestReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestReviewService_DeleteTestReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReviewServiceServer).DeleteTestReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReviewService_DeleteTestReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReviewServiceServer).DeleteTestReview(ctx, req.(*DeleteTestReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestReviewService_GetTestReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReviewServiceServer).GetTestReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReviewService_GetTestReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReviewServiceServer).GetTestReview(ctx, req.(*GetTestReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestReviewService_ListTestReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReviewServiceServer).ListTestReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReviewService_ListTestReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReviewServiceServer).ListTestReview(ctx, req.(*ListTestReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestReviewService_ServiceDesc is the grpc.ServiceDesc for TestReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terminator.api.test.v1.TestReviewService",
	HandlerType: (*TestReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestReview",
			Handler:    _TestReviewService_CreateTestReview_Handler,
		},
		{
			MethodName: "UpdateTestReview",
			Handler:    _TestReviewService_UpdateTestReview_Handler,
		},
		{
			MethodName: "DeleteTestReview",
			Handler:    _TestReviewService_DeleteTestReview_Handler,
		},
		{
			MethodName: "GetTestReview",
			Handler:    _TestReviewService_GetTestReview_Handler,
		},
		{
			MethodName: "ListTestReview",
			Handler:    _TestReviewService_ListTestReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/test/v1/review.proto",
}

const (
	TestReviewCaseService_CreateTestReviewCase_FullMethodName = "/terminator.api.test.v1.TestReviewCaseService/CreateTestReviewCase"
	TestReviewCaseService_UpdateTestReviewCase_FullMethodName = "/terminator.api.test.v1.TestReviewCaseService/UpdateTestReviewCase"
	TestReviewCaseService_DeleteTestReviewCase_FullMethodName = "/terminator.api.test.v1.TestReviewCaseService/DeleteTestReviewCase"
	TestReviewCaseService_GetTestReviewCase_FullMethodName    = "/terminator.api.test.v1.TestReviewCaseService/GetTestReviewCase"
	TestReviewCaseService_ListTestReviewCase_FullMethodName   = "/terminator.api.test.v1.TestReviewCaseService/ListTestReviewCase"
)

// TestReviewCaseServiceClient is the client API for TestReviewCaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestReviewCaseServiceClient interface {
	CreateTestReviewCase(ctx context.Context, in *CreateTestReviewCaseRequest, opts ...grpc.CallOption) (*CreateTestReviewCaseReply, error)
	UpdateTestReviewCase(ctx context.Context, in *UpdateTestReviewCaseRequest, opts ...grpc.CallOption) (*UpdateTestReviewCaseReply, error)
	DeleteTestReviewCase(ctx context.Context, in *DeleteTestReviewCaseRequest, opts ...grpc.CallOption) (*DeleteTestReviewCaseReply, error)
	GetTestReviewCase(ctx context.Context, in *GetTestReviewCaseRequest, opts ...grpc.CallOption) (*GetTestReviewCaseReply, error)
	ListTestReviewCase(ctx context.Context, in *ListTestReviewCaseRequest, opts ...grpc.CallOption) (*ListTestReviewCaseReply, error)
}

type testReviewCaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestReviewCaseServiceClient(cc grpc.ClientConnInterface) TestReviewCaseServiceClient {
	return &testReviewCaseServiceClient{cc}
}

func (c *testReviewCaseServiceClient) CreateTestReviewCase(ctx context.Context, in *CreateTestReviewCaseRequest, opts ...grpc.CallOption) (*CreateTestReviewCaseReply, error) {
	out := new(CreateTestReviewCaseReply)
	err := c.cc.Invoke(ctx, TestReviewCaseService_CreateTestReviewCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testReviewCaseServiceClient) UpdateTestReviewCase(ctx context.Context, in *UpdateTestReviewCaseRequest, opts ...grpc.CallOption) (*UpdateTestReviewCaseReply, error) {
	out := new(UpdateTestReviewCaseReply)
	err := c.cc.Invoke(ctx, TestReviewCaseService_UpdateTestReviewCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testReviewCaseServiceClient) DeleteTestReviewCase(ctx context.Context, in *DeleteTestReviewCaseRequest, opts ...grpc.CallOption) (*DeleteTestReviewCaseReply, error) {
	out := new(DeleteTestReviewCaseReply)
	err := c.cc.Invoke(ctx, TestReviewCaseService_DeleteTestReviewCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testReviewCaseServiceClient) GetTestReviewCase(ctx context.Context, in *GetTestReviewCaseRequest, opts ...grpc.CallOption) (*GetTestReviewCaseReply, error) {
	out := new(GetTestReviewCaseReply)
	err := c.cc.Invoke(ctx, TestReviewCaseService_GetTestReviewCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testReviewCaseServiceClient) ListTestReviewCase(ctx context.Context, in *ListTestReviewCaseRequest, opts ...grpc.CallOption) (*ListTestReviewCaseReply, error) {
	out := new(ListTestReviewCaseReply)
	err := c.cc.Invoke(ctx, TestReviewCaseService_ListTestReviewCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestReviewCaseServiceServer is the server API for TestReviewCaseService service.
// All implementations must embed UnimplementedTestReviewCaseServiceServer
// for forward compatibility
type TestReviewCaseServiceServer interface {
	CreateTestReviewCase(context.Context, *CreateTestReviewCaseRequest) (*CreateTestReviewCaseReply, error)
	UpdateTestReviewCase(context.Context, *UpdateTestReviewCaseRequest) (*UpdateTestReviewCaseReply, error)
	DeleteTestReviewCase(context.Context, *DeleteTestReviewCaseRequest) (*DeleteTestReviewCaseReply, error)
	GetTestReviewCase(context.Context, *GetTestReviewCaseRequest) (*GetTestReviewCaseReply, error)
	ListTestReviewCase(context.Context, *ListTestReviewCaseRequest) (*ListTestReviewCaseReply, error)
	mustEmbedUnimplementedTestReviewCaseServiceServer()
}

// UnimplementedTestReviewCaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestReviewCaseServiceServer struct {
}

func (UnimplementedTestReviewCaseServiceServer) CreateTestReviewCase(context.Context, *CreateTestReviewCaseRequest) (*CreateTestReviewCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestReviewCase not implemented")
}
func (UnimplementedTestReviewCaseServiceServer) UpdateTestReviewCase(context.Context, *UpdateTestReviewCaseRequest) (*UpdateTestReviewCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestReviewCase not implemented")
}
func (UnimplementedTestReviewCaseServiceServer) DeleteTestReviewCase(context.Context, *DeleteTestReviewCaseRequest) (*DeleteTestReviewCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestReviewCase not implemented")
}
func (UnimplementedTestReviewCaseServiceServer) GetTestReviewCase(context.Context, *GetTestReviewCaseRequest) (*GetTestReviewCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestReviewCase not implemented")
}
func (UnimplementedTestReviewCaseServiceServer) ListTestReviewCase(context.Context, *ListTestReviewCaseRequest) (*ListTestReviewCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestReviewCase not implemented")
}
func (UnimplementedTestReviewCaseServiceServer) mustEmbedUnimplementedTestReviewCaseServiceServer() {}

// UnsafeTestReviewCaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestReviewCaseServiceServer will
// result in compilation errors.
type UnsafeTestReviewCaseServiceServer interface {
	mustEmbedUnimplementedTestReviewCaseServiceServer()
}

func RegisterTestReviewCaseServiceServer(s grpc.ServiceRegistrar, srv TestReviewCaseServiceServer) {
	s.RegisterService(&TestReviewCaseService_ServiceDesc, srv)
}

func _TestReviewCaseService_CreateTestReviewCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestReviewCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReviewCaseServiceServer).CreateTestReviewCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReviewCaseService_CreateTestReviewCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReviewCaseServiceServer).CreateTestReviewCase(ctx, req.(*CreateTestReviewCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestReviewCaseService_UpdateTestReviewCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestReviewCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReviewCaseServiceServer).UpdateTestReviewCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReviewCaseService_UpdateTestReviewCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReviewCaseServiceServer).UpdateTestReviewCase(ctx, req.(*UpdateTestReviewCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestReviewCaseService_DeleteTestReviewCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestReviewCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReviewCaseServiceServer).DeleteTestReviewCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReviewCaseService_DeleteTestReviewCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReviewCaseServiceServer).DeleteTestReviewCase(ctx, req.(*DeleteTestReviewCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestReviewCaseService_GetTestReviewCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestReviewCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReviewCaseServiceServer).GetTestReviewCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReviewCaseService_GetTestReviewCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReviewCaseServiceServer).GetTestReviewCase(ctx, req.(*GetTestReviewCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestReviewCaseService_ListTestReviewCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestReviewCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReviewCaseServiceServer).ListTestReviewCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReviewCaseService_ListTestReviewCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReviewCaseServiceServer).ListTestReviewCase(ctx, req.(*ListTestReviewCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestReviewCaseService_ServiceDesc is the grpc.ServiceDesc for TestReviewCaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestReviewCaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terminator.api.test.v1.TestReviewCaseService",
	HandlerType: (*TestReviewCaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestReviewCase",
			Handler:    _TestReviewCaseService_CreateTestReviewCase_Handler,
		},
		{
			MethodName: "UpdateTestReviewCase",
			Handler:    _TestReviewCaseService_UpdateTestReviewCase_Handler,
		},
		{
			MethodName: "DeleteTestReviewCase",
			Handler:    _TestReviewCaseService_DeleteTestReviewCase_Handler,
		},
		{
			MethodName: "GetTestReviewCase",
			Handler:    _TestReviewCaseService_GetTestReviewCase_Handler,
		},
		{
			MethodName: "ListTestReviewCase",
			Handler:    _TestReviewCaseService_ListTestReviewCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/test/v1/review.proto",
}

const (
	TestReviewReportService_GetTestPlanReport_FullMethodName = "/terminator.api.test.v1.TestReviewReportService/GetTestPlanReport"
)

// TestReviewReportServiceClient is the client API for TestReviewReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestReviewReportServiceClient interface {
	GetTestPlanReport(ctx context.Context, in *GetTestReviewReportRequest, opts ...grpc.CallOption) (*GetTestReviewReportReply, error)
}

type testReviewReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestReviewReportServiceClient(cc grpc.ClientConnInterface) TestReviewReportServiceClient {
	return &testReviewReportServiceClient{cc}
}

func (c *testReviewReportServiceClient) GetTestPlanReport(ctx context.Context, in *GetTestReviewReportRequest, opts ...grpc.CallOption) (*GetTestReviewReportReply, error) {
	out := new(GetTestReviewReportReply)
	err := c.cc.Invoke(ctx, TestReviewReportService_GetTestPlanReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestReviewReportServiceServer is the server API for TestReviewReportService service.
// All implementations must embed UnimplementedTestReviewReportServiceServer
// for forward compatibility
type TestReviewReportServiceServer interface {
	GetTestPlanReport(context.Context, *GetTestReviewReportRequest) (*GetTestReviewReportReply, error)
	mustEmbedUnimplementedTestReviewReportServiceServer()
}

// UnimplementedTestReviewReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestReviewReportServiceServer struct {
}

func (UnimplementedTestReviewReportServiceServer) GetTestPlanReport(context.Context, *GetTestReviewReportRequest) (*GetTestReviewReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestPlanReport not implemented")
}
func (UnimplementedTestReviewReportServiceServer) mustEmbedUnimplementedTestReviewReportServiceServer() {
}

// UnsafeTestReviewReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestReviewReportServiceServer will
// result in compilation errors.
type UnsafeTestReviewReportServiceServer interface {
	mustEmbedUnimplementedTestReviewReportServiceServer()
}

func RegisterTestReviewReportServiceServer(s grpc.ServiceRegistrar, srv TestReviewReportServiceServer) {
	s.RegisterService(&TestReviewReportService_ServiceDesc, srv)
}

func _TestReviewReportService_GetTestPlanReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestReviewReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestReviewReportServiceServer).GetTestPlanReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestReviewReportService_GetTestPlanReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestReviewReportServiceServer).GetTestPlanReport(ctx, req.(*GetTestReviewReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestReviewReportService_ServiceDesc is the grpc.ServiceDesc for TestReviewReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestReviewReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terminator.api.test.v1.TestReviewReportService",
	HandlerType: (*TestReviewReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTestPlanReport",
			Handler:    _TestReviewReportService_GetTestPlanReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/test/v1/review.proto",
}
