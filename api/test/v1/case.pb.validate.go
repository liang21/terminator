// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/test/v1/case.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TestCase with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestCase with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestCaseMultiError, or nil
// if none found.
func (m *TestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *TestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ModuleId

	// no validation rules for ProjectId

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Maintainer

	// no validation rules for Priority

	// no validation rules for Method

	// no validation rules for Prerequisite

	// no validation rules for Remark

	// no validation rules for Steps

	// no validation rules for ReviewStatus

	// no validation rules for Status

	// no validation rules for StepDescription

	// no validation rules for StepExpectedResult

	// no validation rules for CreateUser

	// no validation rules for OriginalStatus

	// no validation rules for LastExecutedResult

	if len(errors) > 0 {
		return TestCaseMultiError(errors)
	}

	return nil
}

// TestCaseMultiError is an error wrapping multiple validation errors returned
// by TestCase.ValidateAll() if the designated constraints aren't met.
type TestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestCaseMultiError) AllErrors() []error { return m }

// TestCaseValidationError is the validation error returned by
// TestCase.Validate if the designated constraints aren't met.
type TestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestCaseValidationError) ErrorName() string { return "TestCaseValidationError" }

// Error satisfies the builtin error interface
func (e TestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestCaseValidationError{}

// Validate checks the field values on CreateTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTestCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTestCaseRequestMultiError, or nil if none found.
func (m *CreateTestCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTestCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetModuleId() <= 0 {
		err := CreateTestCaseRequestValidationError{
			field:  "ModuleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProjectId() <= 0 {
		err := CreateTestCaseRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := CreateTestCaseRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 50 {
		err := CreateTestCaseRequestValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMaintainer()); l < 1 || l > 50 {
		err := CreateTestCaseRequestValidationError{
			field:  "Maintainer",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPriority()); l < 1 || l > 50 {
		err := CreateTestCaseRequestValidationError{
			field:  "Priority",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Method

	if l := utf8.RuneCountInString(m.GetPrerequisite()); l < 1 || l > 50 {
		err := CreateTestCaseRequestValidationError{
			field:  "Prerequisite",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remark

	// no validation rules for Steps

	// no validation rules for ReviewStatus

	// no validation rules for Status

	// no validation rules for StepDescription

	// no validation rules for StepExpectedResult

	// no validation rules for CreateUser

	// no validation rules for OriginalStatus

	// no validation rules for LastExecutedResult

	if len(errors) > 0 {
		return CreateTestCaseRequestMultiError(errors)
	}

	return nil
}

// CreateTestCaseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTestCaseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTestCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTestCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTestCaseRequestMultiError) AllErrors() []error { return m }

// CreateTestCaseRequestValidationError is the validation error returned by
// CreateTestCaseRequest.Validate if the designated constraints aren't met.
type CreateTestCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTestCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTestCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTestCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTestCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTestCaseRequestValidationError) ErrorName() string {
	return "CreateTestCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTestCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTestCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTestCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTestCaseRequestValidationError{}

// Validate checks the field values on CreateTestCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTestCaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTestCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTestCaseReplyMultiError, or nil if none found.
func (m *CreateTestCaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTestCaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestCase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTestCaseReplyValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTestCaseReplyValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestCase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTestCaseReplyValidationError{
				field:  "TestCase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTestCaseReplyMultiError(errors)
	}

	return nil
}

// CreateTestCaseReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTestCaseReply.ValidateAll() if the designated
// constraints aren't met.
type CreateTestCaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTestCaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTestCaseReplyMultiError) AllErrors() []error { return m }

// CreateTestCaseReplyValidationError is the validation error returned by
// CreateTestCaseReply.Validate if the designated constraints aren't met.
type CreateTestCaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTestCaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTestCaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTestCaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTestCaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTestCaseReplyValidationError) ErrorName() string {
	return "CreateTestCaseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTestCaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTestCaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTestCaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTestCaseReplyValidationError{}

// Validate checks the field values on UpdateTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestCaseRequestMultiError, or nil if none found.
func (m *UpdateTestCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateTestCaseRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetModuleId() <= 0 {
		err := UpdateTestCaseRequestValidationError{
			field:  "ModuleId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProjectId

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := UpdateTestCaseRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 50 {
		err := UpdateTestCaseRequestValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMaintainer()); l < 1 || l > 50 {
		err := UpdateTestCaseRequestValidationError{
			field:  "Maintainer",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPriority()); l < 1 || l > 50 {
		err := UpdateTestCaseRequestValidationError{
			field:  "Priority",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Method

	if l := utf8.RuneCountInString(m.GetPrerequisite()); l < 1 || l > 50 {
		err := UpdateTestCaseRequestValidationError{
			field:  "Prerequisite",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Remark

	// no validation rules for Steps

	// no validation rules for ReviewStatus

	// no validation rules for Status

	// no validation rules for StepDescription

	// no validation rules for StepExpectedResult

	// no validation rules for CreateUser

	// no validation rules for OriginalStatus

	// no validation rules for LastExecutedResult

	if len(errors) > 0 {
		return UpdateTestCaseRequestMultiError(errors)
	}

	return nil
}

// UpdateTestCaseRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTestCaseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTestCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestCaseRequestMultiError) AllErrors() []error { return m }

// UpdateTestCaseRequestValidationError is the validation error returned by
// UpdateTestCaseRequest.Validate if the designated constraints aren't met.
type UpdateTestCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestCaseRequestValidationError) ErrorName() string {
	return "UpdateTestCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestCaseRequestValidationError{}

// Validate checks the field values on UpdateTestCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestCaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestCaseReplyMultiError, or nil if none found.
func (m *UpdateTestCaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestCaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestCase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTestCaseReplyValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTestCaseReplyValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestCase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestCaseReplyValidationError{
				field:  "TestCase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTestCaseReplyMultiError(errors)
	}

	return nil
}

// UpdateTestCaseReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateTestCaseReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateTestCaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestCaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestCaseReplyMultiError) AllErrors() []error { return m }

// UpdateTestCaseReplyValidationError is the validation error returned by
// UpdateTestCaseReply.Validate if the designated constraints aren't met.
type UpdateTestCaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestCaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestCaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestCaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestCaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestCaseReplyValidationError) ErrorName() string {
	return "UpdateTestCaseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestCaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestCaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestCaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestCaseReplyValidationError{}

// Validate checks the field values on DeleteTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestCaseRequestMultiError, or nil if none found.
func (m *DeleteTestCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTestCaseRequestMultiError(errors)
	}

	return nil
}

// DeleteTestCaseRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTestCaseRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTestCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestCaseRequestMultiError) AllErrors() []error { return m }

// DeleteTestCaseRequestValidationError is the validation error returned by
// DeleteTestCaseRequest.Validate if the designated constraints aren't met.
type DeleteTestCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestCaseRequestValidationError) ErrorName() string {
	return "DeleteTestCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestCaseRequestValidationError{}

// Validate checks the field values on DeleteTestCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestCaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestCaseReplyMultiError, or nil if none found.
func (m *DeleteTestCaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestCaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTestCaseReplyMultiError(errors)
	}

	return nil
}

// DeleteTestCaseReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTestCaseReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteTestCaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestCaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestCaseReplyMultiError) AllErrors() []error { return m }

// DeleteTestCaseReplyValidationError is the validation error returned by
// DeleteTestCaseReply.Validate if the designated constraints aren't met.
type DeleteTestCaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestCaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestCaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestCaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestCaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestCaseReplyValidationError) ErrorName() string {
	return "DeleteTestCaseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestCaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestCaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestCaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestCaseReplyValidationError{}

// Validate checks the field values on GetTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestCaseRequestMultiError, or nil if none found.
func (m *GetTestCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTestCaseRequestMultiError(errors)
	}

	return nil
}

// GetTestCaseRequestMultiError is an error wrapping multiple validation errors
// returned by GetTestCaseRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTestCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestCaseRequestMultiError) AllErrors() []error { return m }

// GetTestCaseRequestValidationError is the validation error returned by
// GetTestCaseRequest.Validate if the designated constraints aren't met.
type GetTestCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestCaseRequestValidationError) ErrorName() string {
	return "GetTestCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestCaseRequestValidationError{}

// Validate checks the field values on GetTestCaseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTestCaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestCaseReplyMultiError, or nil if none found.
func (m *GetTestCaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestCaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestCase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTestCaseReplyValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTestCaseReplyValidationError{
					field:  "TestCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestCase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTestCaseReplyValidationError{
				field:  "TestCase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTestCaseReplyMultiError(errors)
	}

	return nil
}

// GetTestCaseReplyMultiError is an error wrapping multiple validation errors
// returned by GetTestCaseReply.ValidateAll() if the designated constraints
// aren't met.
type GetTestCaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestCaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestCaseReplyMultiError) AllErrors() []error { return m }

// GetTestCaseReplyValidationError is the validation error returned by
// GetTestCaseReply.Validate if the designated constraints aren't met.
type GetTestCaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestCaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestCaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestCaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestCaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestCaseReplyValidationError) ErrorName() string { return "GetTestCaseReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetTestCaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestCaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestCaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestCaseReplyValidationError{}

// Validate checks the field values on ListTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTestCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTestCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTestCaseRequestMultiError, or nil if none found.
func (m *ListTestCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTestCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListTestCaseRequestMultiError(errors)
	}

	return nil
}

// ListTestCaseRequestMultiError is an error wrapping multiple validation
// errors returned by ListTestCaseRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTestCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTestCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTestCaseRequestMultiError) AllErrors() []error { return m }

// ListTestCaseRequestValidationError is the validation error returned by
// ListTestCaseRequest.Validate if the designated constraints aren't met.
type ListTestCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestCaseRequestValidationError) ErrorName() string {
	return "ListTestCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTestCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestCaseRequestValidationError{}

// Validate checks the field values on ListTestCaseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTestCaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTestCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTestCaseReplyMultiError, or nil if none found.
func (m *ListTestCaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTestCaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTestCaseReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTestCaseReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTestCaseReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTestCaseReplyMultiError(errors)
	}

	return nil
}

// ListTestCaseReplyMultiError is an error wrapping multiple validation errors
// returned by ListTestCaseReply.ValidateAll() if the designated constraints
// aren't met.
type ListTestCaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTestCaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTestCaseReplyMultiError) AllErrors() []error { return m }

// ListTestCaseReplyValidationError is the validation error returned by
// ListTestCaseReply.Validate if the designated constraints aren't met.
type ListTestCaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestCaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestCaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestCaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestCaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestCaseReplyValidationError) ErrorName() string {
	return "ListTestCaseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTestCaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestCaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestCaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestCaseReplyValidationError{}
