// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/test/v1/review.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TestReview with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestReview) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestReview with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestReviewMultiError, or
// nil if none found.
func (m *TestReview) ValidateAll() error {
	return m.validate(true)
}

func (m *TestReview) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectId

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Description

	// no validation rules for ReviewTotal

	// no validation rules for ReviewPassRule

	if all {
		switch v := interface{}(m.GetReviewedEndAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TestReviewValidationError{
					field:  "ReviewedEndAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TestReviewValidationError{
					field:  "ReviewedEndAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReviewedEndAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TestReviewValidationError{
				field:  "ReviewedEndAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TestReviewMultiError(errors)
	}

	return nil
}

// TestReviewMultiError is an error wrapping multiple validation errors
// returned by TestReview.ValidateAll() if the designated constraints aren't met.
type TestReviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestReviewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestReviewMultiError) AllErrors() []error { return m }

// TestReviewValidationError is the validation error returned by
// TestReview.Validate if the designated constraints aren't met.
type TestReviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestReviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestReviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestReviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestReviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestReviewValidationError) ErrorName() string { return "TestReviewValidationError" }

// Error satisfies the builtin error interface
func (e TestReviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestReview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestReviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestReviewValidationError{}

// Validate checks the field values on CreateTestReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTestReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTestReviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTestReviewRequestMultiError, or nil if none found.
func (m *CreateTestReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTestReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProjectId

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := CreateTestReviewRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetReviewedEndAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTestReviewRequestValidationError{
					field:  "ReviewedEndAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTestReviewRequestValidationError{
					field:  "ReviewedEndAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReviewedEndAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTestReviewRequestValidationError{
				field:  "ReviewedEndAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTestReviewRequestMultiError(errors)
	}

	return nil
}

// CreateTestReviewRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTestReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTestReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTestReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTestReviewRequestMultiError) AllErrors() []error { return m }

// CreateTestReviewRequestValidationError is the validation error returned by
// CreateTestReviewRequest.Validate if the designated constraints aren't met.
type CreateTestReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTestReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTestReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTestReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTestReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTestReviewRequestValidationError) ErrorName() string {
	return "CreateTestReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTestReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTestReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTestReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTestReviewRequestValidationError{}

// Validate checks the field values on CreateTestReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTestReviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTestReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTestReviewReplyMultiError, or nil if none found.
func (m *CreateTestReviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTestReviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestReview()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTestReviewReplyValidationError{
					field:  "TestReview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTestReviewReplyValidationError{
					field:  "TestReview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestReview()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTestReviewReplyValidationError{
				field:  "TestReview",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTestReviewReplyMultiError(errors)
	}

	return nil
}

// CreateTestReviewReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTestReviewReply.ValidateAll() if the designated
// constraints aren't met.
type CreateTestReviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTestReviewReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTestReviewReplyMultiError) AllErrors() []error { return m }

// CreateTestReviewReplyValidationError is the validation error returned by
// CreateTestReviewReply.Validate if the designated constraints aren't met.
type CreateTestReviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTestReviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTestReviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTestReviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTestReviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTestReviewReplyValidationError) ErrorName() string {
	return "CreateTestReviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTestReviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTestReviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTestReviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTestReviewReplyValidationError{}

// Validate checks the field values on UpdateTestReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestReviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestReviewRequestMultiError, or nil if none found.
func (m *UpdateTestReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateTestReviewRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProjectId

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 50 {
		err := UpdateTestReviewRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetReviewedEndAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTestReviewRequestValidationError{
					field:  "ReviewedEndAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTestReviewRequestValidationError{
					field:  "ReviewedEndAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReviewedEndAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestReviewRequestValidationError{
				field:  "ReviewedEndAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTestReviewRequestMultiError(errors)
	}

	return nil
}

// UpdateTestReviewRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTestReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTestReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestReviewRequestMultiError) AllErrors() []error { return m }

// UpdateTestReviewRequestValidationError is the validation error returned by
// UpdateTestReviewRequest.Validate if the designated constraints aren't met.
type UpdateTestReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestReviewRequestValidationError) ErrorName() string {
	return "UpdateTestReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestReviewRequestValidationError{}

// Validate checks the field values on UpdateTestReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestReviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestReviewReplyMultiError, or nil if none found.
func (m *UpdateTestReviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestReviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestReview()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTestReviewReplyValidationError{
					field:  "TestReview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTestReviewReplyValidationError{
					field:  "TestReview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestReview()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestReviewReplyValidationError{
				field:  "TestReview",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTestReviewReplyMultiError(errors)
	}

	return nil
}

// UpdateTestReviewReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateTestReviewReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateTestReviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestReviewReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestReviewReplyMultiError) AllErrors() []error { return m }

// UpdateTestReviewReplyValidationError is the validation error returned by
// UpdateTestReviewReply.Validate if the designated constraints aren't met.
type UpdateTestReviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestReviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestReviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestReviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestReviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestReviewReplyValidationError) ErrorName() string {
	return "UpdateTestReviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestReviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestReviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestReviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestReviewReplyValidationError{}

// Validate checks the field values on DeleteTestReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestReviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestReviewRequestMultiError, or nil if none found.
func (m *DeleteTestReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTestReviewRequestMultiError(errors)
	}

	return nil
}

// DeleteTestReviewRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTestReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTestReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestReviewRequestMultiError) AllErrors() []error { return m }

// DeleteTestReviewRequestValidationError is the validation error returned by
// DeleteTestReviewRequest.Validate if the designated constraints aren't met.
type DeleteTestReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestReviewRequestValidationError) ErrorName() string {
	return "DeleteTestReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestReviewRequestValidationError{}

// Validate checks the field values on DeleteTestReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestReviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestReviewReplyMultiError, or nil if none found.
func (m *DeleteTestReviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestReviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTestReviewReplyMultiError(errors)
	}

	return nil
}

// DeleteTestReviewReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTestReviewReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteTestReviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestReviewReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestReviewReplyMultiError) AllErrors() []error { return m }

// DeleteTestReviewReplyValidationError is the validation error returned by
// DeleteTestReviewReply.Validate if the designated constraints aren't met.
type DeleteTestReviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestReviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestReviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestReviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestReviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestReviewReplyValidationError) ErrorName() string {
	return "DeleteTestReviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestReviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestReviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestReviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestReviewReplyValidationError{}

// Validate checks the field values on GetTestReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestReviewRequestMultiError, or nil if none found.
func (m *GetTestReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTestReviewRequestMultiError(errors)
	}

	return nil
}

// GetTestReviewRequestMultiError is an error wrapping multiple validation
// errors returned by GetTestReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTestReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestReviewRequestMultiError) AllErrors() []error { return m }

// GetTestReviewRequestValidationError is the validation error returned by
// GetTestReviewRequest.Validate if the designated constraints aren't met.
type GetTestReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestReviewRequestValidationError) ErrorName() string {
	return "GetTestReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestReviewRequestValidationError{}

// Validate checks the field values on GetTestReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestReviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestReviewReplyMultiError, or nil if none found.
func (m *GetTestReviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestReviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestReview()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTestReviewReplyValidationError{
					field:  "TestReview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTestReviewReplyValidationError{
					field:  "TestReview",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestReview()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTestReviewReplyValidationError{
				field:  "TestReview",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTestReviewReplyMultiError(errors)
	}

	return nil
}

// GetTestReviewReplyMultiError is an error wrapping multiple validation errors
// returned by GetTestReviewReply.ValidateAll() if the designated constraints
// aren't met.
type GetTestReviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestReviewReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestReviewReplyMultiError) AllErrors() []error { return m }

// GetTestReviewReplyValidationError is the validation error returned by
// GetTestReviewReply.Validate if the designated constraints aren't met.
type GetTestReviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestReviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestReviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestReviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestReviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestReviewReplyValidationError) ErrorName() string {
	return "GetTestReviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestReviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestReviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestReviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestReviewReplyValidationError{}

// Validate checks the field values on ListTestReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTestReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTestReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTestReviewRequestMultiError, or nil if none found.
func (m *ListTestReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTestReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListTestReviewRequestMultiError(errors)
	}

	return nil
}

// ListTestReviewRequestMultiError is an error wrapping multiple validation
// errors returned by ListTestReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTestReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTestReviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTestReviewRequestMultiError) AllErrors() []error { return m }

// ListTestReviewRequestValidationError is the validation error returned by
// ListTestReviewRequest.Validate if the designated constraints aren't met.
type ListTestReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestReviewRequestValidationError) ErrorName() string {
	return "ListTestReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTestReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestReviewRequestValidationError{}

// Validate checks the field values on ListTestReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTestReviewReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTestReviewReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTestReviewReplyMultiError, or nil if none found.
func (m *ListTestReviewReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTestReviewReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTestReviewReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTestReviewReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTestReviewReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTestReviewReplyMultiError(errors)
	}

	return nil
}

// ListTestReviewReplyMultiError is an error wrapping multiple validation
// errors returned by ListTestReviewReply.ValidateAll() if the designated
// constraints aren't met.
type ListTestReviewReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTestReviewReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTestReviewReplyMultiError) AllErrors() []error { return m }

// ListTestReviewReplyValidationError is the validation error returned by
// ListTestReviewReply.Validate if the designated constraints aren't met.
type ListTestReviewReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestReviewReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestReviewReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestReviewReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestReviewReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestReviewReplyValidationError) ErrorName() string {
	return "ListTestReviewReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTestReviewReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestReviewReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestReviewReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestReviewReplyValidationError{}

// Validate checks the field values on TestReviewCase with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TestReviewCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestReviewCase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TestReviewCaseMultiError,
// or nil if none found.
func (m *TestReviewCase) ValidateAll() error {
	return m.validate(true)
}

func (m *TestReviewCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ReviewId

	// no validation rules for CaseId

	// no validation rules for Status

	if len(errors) > 0 {
		return TestReviewCaseMultiError(errors)
	}

	return nil
}

// TestReviewCaseMultiError is an error wrapping multiple validation errors
// returned by TestReviewCase.ValidateAll() if the designated constraints
// aren't met.
type TestReviewCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestReviewCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestReviewCaseMultiError) AllErrors() []error { return m }

// TestReviewCaseValidationError is the validation error returned by
// TestReviewCase.Validate if the designated constraints aren't met.
type TestReviewCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestReviewCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestReviewCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestReviewCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestReviewCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestReviewCaseValidationError) ErrorName() string { return "TestReviewCaseValidationError" }

// Error satisfies the builtin error interface
func (e TestReviewCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestReviewCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestReviewCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestReviewCaseValidationError{}

// Validate checks the field values on CreateTestReviewCaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTestReviewCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTestReviewCaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTestReviewCaseRequestMultiError, or nil if none found.
func (m *CreateTestReviewCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTestReviewCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReviewId

	// no validation rules for CaseId

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateTestReviewCaseRequestMultiError(errors)
	}

	return nil
}

// CreateTestReviewCaseRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTestReviewCaseRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateTestReviewCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTestReviewCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTestReviewCaseRequestMultiError) AllErrors() []error { return m }

// CreateTestReviewCaseRequestValidationError is the validation error returned
// by CreateTestReviewCaseRequest.Validate if the designated constraints
// aren't met.
type CreateTestReviewCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTestReviewCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTestReviewCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTestReviewCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTestReviewCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTestReviewCaseRequestValidationError) ErrorName() string {
	return "CreateTestReviewCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTestReviewCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTestReviewCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTestReviewCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTestReviewCaseRequestValidationError{}

// Validate checks the field values on CreateTestReviewCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTestReviewCaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTestReviewCaseReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTestReviewCaseReplyMultiError, or nil if none found.
func (m *CreateTestReviewCaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTestReviewCaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestReviewCase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTestReviewCaseReplyValidationError{
					field:  "TestReviewCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTestReviewCaseReplyValidationError{
					field:  "TestReviewCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestReviewCase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTestReviewCaseReplyValidationError{
				field:  "TestReviewCase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTestReviewCaseReplyMultiError(errors)
	}

	return nil
}

// CreateTestReviewCaseReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTestReviewCaseReply.ValidateAll() if the
// designated constraints aren't met.
type CreateTestReviewCaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTestReviewCaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTestReviewCaseReplyMultiError) AllErrors() []error { return m }

// CreateTestReviewCaseReplyValidationError is the validation error returned by
// CreateTestReviewCaseReply.Validate if the designated constraints aren't met.
type CreateTestReviewCaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTestReviewCaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTestReviewCaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTestReviewCaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTestReviewCaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTestReviewCaseReplyValidationError) ErrorName() string {
	return "CreateTestReviewCaseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTestReviewCaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTestReviewCaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTestReviewCaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTestReviewCaseReplyValidationError{}

// Validate checks the field values on UpdateTestReviewCaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestReviewCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestReviewCaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestReviewCaseRequestMultiError, or nil if none found.
func (m *UpdateTestReviewCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestReviewCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateTestReviewCaseRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ReviewId

	// no validation rules for CaseId

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateTestReviewCaseRequestMultiError(errors)
	}

	return nil
}

// UpdateTestReviewCaseRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTestReviewCaseRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateTestReviewCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestReviewCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestReviewCaseRequestMultiError) AllErrors() []error { return m }

// UpdateTestReviewCaseRequestValidationError is the validation error returned
// by UpdateTestReviewCaseRequest.Validate if the designated constraints
// aren't met.
type UpdateTestReviewCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestReviewCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestReviewCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestReviewCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestReviewCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestReviewCaseRequestValidationError) ErrorName() string {
	return "UpdateTestReviewCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestReviewCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestReviewCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestReviewCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestReviewCaseRequestValidationError{}

// Validate checks the field values on UpdateTestReviewCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTestReviewCaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTestReviewCaseReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTestReviewCaseReplyMultiError, or nil if none found.
func (m *UpdateTestReviewCaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTestReviewCaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestReviewCase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTestReviewCaseReplyValidationError{
					field:  "TestReviewCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTestReviewCaseReplyValidationError{
					field:  "TestReviewCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestReviewCase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTestReviewCaseReplyValidationError{
				field:  "TestReviewCase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTestReviewCaseReplyMultiError(errors)
	}

	return nil
}

// UpdateTestReviewCaseReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateTestReviewCaseReply.ValidateAll() if the
// designated constraints aren't met.
type UpdateTestReviewCaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTestReviewCaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTestReviewCaseReplyMultiError) AllErrors() []error { return m }

// UpdateTestReviewCaseReplyValidationError is the validation error returned by
// UpdateTestReviewCaseReply.Validate if the designated constraints aren't met.
type UpdateTestReviewCaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTestReviewCaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTestReviewCaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTestReviewCaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTestReviewCaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTestReviewCaseReplyValidationError) ErrorName() string {
	return "UpdateTestReviewCaseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTestReviewCaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTestReviewCaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTestReviewCaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTestReviewCaseReplyValidationError{}

// Validate checks the field values on DeleteTestReviewCaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestReviewCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestReviewCaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestReviewCaseRequestMultiError, or nil if none found.
func (m *DeleteTestReviewCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestReviewCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTestReviewCaseRequestMultiError(errors)
	}

	return nil
}

// DeleteTestReviewCaseRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteTestReviewCaseRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteTestReviewCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestReviewCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestReviewCaseRequestMultiError) AllErrors() []error { return m }

// DeleteTestReviewCaseRequestValidationError is the validation error returned
// by DeleteTestReviewCaseRequest.Validate if the designated constraints
// aren't met.
type DeleteTestReviewCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestReviewCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestReviewCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestReviewCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestReviewCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestReviewCaseRequestValidationError) ErrorName() string {
	return "DeleteTestReviewCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestReviewCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestReviewCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestReviewCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestReviewCaseRequestValidationError{}

// Validate checks the field values on DeleteTestReviewCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTestReviewCaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTestReviewCaseReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTestReviewCaseReplyMultiError, or nil if none found.
func (m *DeleteTestReviewCaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTestReviewCaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTestReviewCaseReplyMultiError(errors)
	}

	return nil
}

// DeleteTestReviewCaseReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTestReviewCaseReply.ValidateAll() if the
// designated constraints aren't met.
type DeleteTestReviewCaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTestReviewCaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTestReviewCaseReplyMultiError) AllErrors() []error { return m }

// DeleteTestReviewCaseReplyValidationError is the validation error returned by
// DeleteTestReviewCaseReply.Validate if the designated constraints aren't met.
type DeleteTestReviewCaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTestReviewCaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTestReviewCaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTestReviewCaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTestReviewCaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTestReviewCaseReplyValidationError) ErrorName() string {
	return "DeleteTestReviewCaseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTestReviewCaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTestReviewCaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTestReviewCaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTestReviewCaseReplyValidationError{}

// Validate checks the field values on GetTestReviewCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestReviewCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestReviewCaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestReviewCaseRequestMultiError, or nil if none found.
func (m *GetTestReviewCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestReviewCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTestReviewCaseRequestMultiError(errors)
	}

	return nil
}

// GetTestReviewCaseRequestMultiError is an error wrapping multiple validation
// errors returned by GetTestReviewCaseRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTestReviewCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestReviewCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestReviewCaseRequestMultiError) AllErrors() []error { return m }

// GetTestReviewCaseRequestValidationError is the validation error returned by
// GetTestReviewCaseRequest.Validate if the designated constraints aren't met.
type GetTestReviewCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestReviewCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestReviewCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestReviewCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestReviewCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestReviewCaseRequestValidationError) ErrorName() string {
	return "GetTestReviewCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestReviewCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestReviewCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestReviewCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestReviewCaseRequestValidationError{}

// Validate checks the field values on GetTestReviewCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestReviewCaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestReviewCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestReviewCaseReplyMultiError, or nil if none found.
func (m *GetTestReviewCaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestReviewCaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestReviewCase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTestReviewCaseReplyValidationError{
					field:  "TestReviewCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTestReviewCaseReplyValidationError{
					field:  "TestReviewCase",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestReviewCase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTestReviewCaseReplyValidationError{
				field:  "TestReviewCase",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTestReviewCaseReplyMultiError(errors)
	}

	return nil
}

// GetTestReviewCaseReplyMultiError is an error wrapping multiple validation
// errors returned by GetTestReviewCaseReply.ValidateAll() if the designated
// constraints aren't met.
type GetTestReviewCaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestReviewCaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestReviewCaseReplyMultiError) AllErrors() []error { return m }

// GetTestReviewCaseReplyValidationError is the validation error returned by
// GetTestReviewCaseReply.Validate if the designated constraints aren't met.
type GetTestReviewCaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestReviewCaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestReviewCaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestReviewCaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestReviewCaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestReviewCaseReplyValidationError) ErrorName() string {
	return "GetTestReviewCaseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestReviewCaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestReviewCaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestReviewCaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestReviewCaseReplyValidationError{}

// Validate checks the field values on ListTestReviewCaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTestReviewCaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTestReviewCaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTestReviewCaseRequestMultiError, or nil if none found.
func (m *ListTestReviewCaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTestReviewCaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListTestReviewCaseRequestMultiError(errors)
	}

	return nil
}

// ListTestReviewCaseRequestMultiError is an error wrapping multiple validation
// errors returned by ListTestReviewCaseRequest.ValidateAll() if the
// designated constraints aren't met.
type ListTestReviewCaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTestReviewCaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTestReviewCaseRequestMultiError) AllErrors() []error { return m }

// ListTestReviewCaseRequestValidationError is the validation error returned by
// ListTestReviewCaseRequest.Validate if the designated constraints aren't met.
type ListTestReviewCaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestReviewCaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestReviewCaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestReviewCaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestReviewCaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestReviewCaseRequestValidationError) ErrorName() string {
	return "ListTestReviewCaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTestReviewCaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestReviewCaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestReviewCaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestReviewCaseRequestValidationError{}

// Validate checks the field values on ListTestReviewCaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTestReviewCaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTestReviewCaseReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTestReviewCaseReplyMultiError, or nil if none found.
func (m *ListTestReviewCaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTestReviewCaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTestReviewCaseReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTestReviewCaseReplyValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTestReviewCaseReplyValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTestReviewCaseReplyMultiError(errors)
	}

	return nil
}

// ListTestReviewCaseReplyMultiError is an error wrapping multiple validation
// errors returned by ListTestReviewCaseReply.ValidateAll() if the designated
// constraints aren't met.
type ListTestReviewCaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTestReviewCaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTestReviewCaseReplyMultiError) AllErrors() []error { return m }

// ListTestReviewCaseReplyValidationError is the validation error returned by
// ListTestReviewCaseReply.Validate if the designated constraints aren't met.
type ListTestReviewCaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTestReviewCaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTestReviewCaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTestReviewCaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTestReviewCaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTestReviewCaseReplyValidationError) ErrorName() string {
	return "ListTestReviewCaseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTestReviewCaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTestReviewCaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTestReviewCaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTestReviewCaseReplyValidationError{}

// Validate checks the field values on TestReviewReport with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TestReviewReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TestReviewReport with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TestReviewReportMultiError, or nil if none found.
func (m *TestReviewReport) ValidateAll() error {
	return m.validate(true)
}

func (m *TestReviewReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectId

	// no validation rules for Name

	if len(errors) > 0 {
		return TestReviewReportMultiError(errors)
	}

	return nil
}

// TestReviewReportMultiError is an error wrapping multiple validation errors
// returned by TestReviewReport.ValidateAll() if the designated constraints
// aren't met.
type TestReviewReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TestReviewReportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TestReviewReportMultiError) AllErrors() []error { return m }

// TestReviewReportValidationError is the validation error returned by
// TestReviewReport.Validate if the designated constraints aren't met.
type TestReviewReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestReviewReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestReviewReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestReviewReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestReviewReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestReviewReportValidationError) ErrorName() string { return "TestReviewReportValidationError" }

// Error satisfies the builtin error interface
func (e TestReviewReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTestReviewReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestReviewReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestReviewReportValidationError{}

// Validate checks the field values on GetTestReviewReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestReviewReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestReviewReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestReviewReportRequestMultiError, or nil if none found.
func (m *GetTestReviewReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestReviewReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTestReviewReportRequestMultiError(errors)
	}

	return nil
}

// GetTestReviewReportRequestMultiError is an error wrapping multiple
// validation errors returned by GetTestReviewReportRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTestReviewReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestReviewReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestReviewReportRequestMultiError) AllErrors() []error { return m }

// GetTestReviewReportRequestValidationError is the validation error returned
// by GetTestReviewReportRequest.Validate if the designated constraints aren't met.
type GetTestReviewReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestReviewReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestReviewReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestReviewReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestReviewReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestReviewReportRequestValidationError) ErrorName() string {
	return "GetTestReviewReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestReviewReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestReviewReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestReviewReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestReviewReportRequestValidationError{}

// Validate checks the field values on GetTestReviewReportReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTestReviewReportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTestReviewReportReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTestReviewReportReplyMultiError, or nil if none found.
func (m *GetTestReviewReportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTestReviewReportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTestReviewReport()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTestReviewReportReplyValidationError{
					field:  "TestReviewReport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTestReviewReportReplyValidationError{
					field:  "TestReviewReport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTestReviewReport()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTestReviewReportReplyValidationError{
				field:  "TestReviewReport",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTestReviewReportReplyMultiError(errors)
	}

	return nil
}

// GetTestReviewReportReplyMultiError is an error wrapping multiple validation
// errors returned by GetTestReviewReportReply.ValidateAll() if the designated
// constraints aren't met.
type GetTestReviewReportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTestReviewReportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTestReviewReportReplyMultiError) AllErrors() []error { return m }

// GetTestReviewReportReplyValidationError is the validation error returned by
// GetTestReviewReportReply.Validate if the designated constraints aren't met.
type GetTestReviewReportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTestReviewReportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTestReviewReportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTestReviewReportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTestReviewReportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTestReviewReportReplyValidationError) ErrorName() string {
	return "GetTestReviewReportReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTestReviewReportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTestReviewReportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTestReviewReportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTestReviewReportReplyValidationError{}
