// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/test/v1/case.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestCaseService_CreateTestCase_FullMethodName = "/terminator.api.test.v1.TestCaseService/CreateTestCase"
	TestCaseService_UpdateTestCase_FullMethodName = "/terminator.api.test.v1.TestCaseService/UpdateTestCase"
	TestCaseService_DeleteTestCase_FullMethodName = "/terminator.api.test.v1.TestCaseService/DeleteTestCase"
	TestCaseService_GetTestCase_FullMethodName    = "/terminator.api.test.v1.TestCaseService/GetTestCase"
	TestCaseService_ListTestCase_FullMethodName   = "/terminator.api.test.v1.TestCaseService/ListTestCase"
)

// TestCaseServiceClient is the client API for TestCaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestCaseServiceClient interface {
	CreateTestCase(ctx context.Context, in *CreateTestCaseRequest, opts ...grpc.CallOption) (*CreateTestCaseReply, error)
	UpdateTestCase(ctx context.Context, in *UpdateTestCaseRequest, opts ...grpc.CallOption) (*UpdateTestCaseReply, error)
	DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*DeleteTestCaseReply, error)
	GetTestCase(ctx context.Context, in *GetTestCaseRequest, opts ...grpc.CallOption) (*GetTestCaseReply, error)
	ListTestCase(ctx context.Context, in *ListTestCaseRequest, opts ...grpc.CallOption) (*ListTestCaseReply, error)
}

type testCaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestCaseServiceClient(cc grpc.ClientConnInterface) TestCaseServiceClient {
	return &testCaseServiceClient{cc}
}

func (c *testCaseServiceClient) CreateTestCase(ctx context.Context, in *CreateTestCaseRequest, opts ...grpc.CallOption) (*CreateTestCaseReply, error) {
	out := new(CreateTestCaseReply)
	err := c.cc.Invoke(ctx, TestCaseService_CreateTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCaseServiceClient) UpdateTestCase(ctx context.Context, in *UpdateTestCaseRequest, opts ...grpc.CallOption) (*UpdateTestCaseReply, error) {
	out := new(UpdateTestCaseReply)
	err := c.cc.Invoke(ctx, TestCaseService_UpdateTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCaseServiceClient) DeleteTestCase(ctx context.Context, in *DeleteTestCaseRequest, opts ...grpc.CallOption) (*DeleteTestCaseReply, error) {
	out := new(DeleteTestCaseReply)
	err := c.cc.Invoke(ctx, TestCaseService_DeleteTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCaseServiceClient) GetTestCase(ctx context.Context, in *GetTestCaseRequest, opts ...grpc.CallOption) (*GetTestCaseReply, error) {
	out := new(GetTestCaseReply)
	err := c.cc.Invoke(ctx, TestCaseService_GetTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testCaseServiceClient) ListTestCase(ctx context.Context, in *ListTestCaseRequest, opts ...grpc.CallOption) (*ListTestCaseReply, error) {
	out := new(ListTestCaseReply)
	err := c.cc.Invoke(ctx, TestCaseService_ListTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestCaseServiceServer is the server API for TestCaseService service.
// All implementations must embed UnimplementedTestCaseServiceServer
// for forward compatibility
type TestCaseServiceServer interface {
	CreateTestCase(context.Context, *CreateTestCaseRequest) (*CreateTestCaseReply, error)
	UpdateTestCase(context.Context, *UpdateTestCaseRequest) (*UpdateTestCaseReply, error)
	DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*DeleteTestCaseReply, error)
	GetTestCase(context.Context, *GetTestCaseRequest) (*GetTestCaseReply, error)
	ListTestCase(context.Context, *ListTestCaseRequest) (*ListTestCaseReply, error)
	mustEmbedUnimplementedTestCaseServiceServer()
}

// UnimplementedTestCaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestCaseServiceServer struct {
}

func (UnimplementedTestCaseServiceServer) CreateTestCase(context.Context, *CreateTestCaseRequest) (*CreateTestCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestCase not implemented")
}
func (UnimplementedTestCaseServiceServer) UpdateTestCase(context.Context, *UpdateTestCaseRequest) (*UpdateTestCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestCase not implemented")
}
func (UnimplementedTestCaseServiceServer) DeleteTestCase(context.Context, *DeleteTestCaseRequest) (*DeleteTestCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestCase not implemented")
}
func (UnimplementedTestCaseServiceServer) GetTestCase(context.Context, *GetTestCaseRequest) (*GetTestCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestCase not implemented")
}
func (UnimplementedTestCaseServiceServer) ListTestCase(context.Context, *ListTestCaseRequest) (*ListTestCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestCase not implemented")
}
func (UnimplementedTestCaseServiceServer) mustEmbedUnimplementedTestCaseServiceServer() {}

// UnsafeTestCaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestCaseServiceServer will
// result in compilation errors.
type UnsafeTestCaseServiceServer interface {
	mustEmbedUnimplementedTestCaseServiceServer()
}

func RegisterTestCaseServiceServer(s grpc.ServiceRegistrar, srv TestCaseServiceServer) {
	s.RegisterService(&TestCaseService_ServiceDesc, srv)
}

func _TestCaseService_CreateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).CreateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestCaseService_CreateTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).CreateTestCase(ctx, req.(*CreateTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCaseService_UpdateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).UpdateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestCaseService_UpdateTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).UpdateTestCase(ctx, req.(*UpdateTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCaseService_DeleteTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).DeleteTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestCaseService_DeleteTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).DeleteTestCase(ctx, req.(*DeleteTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCaseService_GetTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).GetTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestCaseService_GetTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).GetTestCase(ctx, req.(*GetTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestCaseService_ListTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestCaseServiceServer).ListTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestCaseService_ListTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestCaseServiceServer).ListTestCase(ctx, req.(*ListTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestCaseService_ServiceDesc is the grpc.ServiceDesc for TestCaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestCaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terminator.api.test.v1.TestCaseService",
	HandlerType: (*TestCaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestCase",
			Handler:    _TestCaseService_CreateTestCase_Handler,
		},
		{
			MethodName: "UpdateTestCase",
			Handler:    _TestCaseService_UpdateTestCase_Handler,
		},
		{
			MethodName: "DeleteTestCase",
			Handler:    _TestCaseService_DeleteTestCase_Handler,
		},
		{
			MethodName: "GetTestCase",
			Handler:    _TestCaseService_GetTestCase_Handler,
		},
		{
			MethodName: "ListTestCase",
			Handler:    _TestCaseService_ListTestCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/test/v1/case.proto",
}
