// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/test/v1/module.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestModuleService_CreateTestModule_FullMethodName = "/terminator.api.test.v1.TestModuleService/CreateTestModule"
	TestModuleService_UpdateTestModule_FullMethodName = "/terminator.api.test.v1.TestModuleService/UpdateTestModule"
	TestModuleService_DeleteTestModule_FullMethodName = "/terminator.api.test.v1.TestModuleService/DeleteTestModule"
	TestModuleService_GetTestModule_FullMethodName    = "/terminator.api.test.v1.TestModuleService/GetTestModule"
	TestModuleService_ListTestModule_FullMethodName   = "/terminator.api.test.v1.TestModuleService/ListTestModule"
)

// TestModuleServiceClient is the client API for TestModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestModuleServiceClient interface {
	CreateTestModule(ctx context.Context, in *CreateTestModuleRequest, opts ...grpc.CallOption) (*CreateTestModuleReply, error)
	UpdateTestModule(ctx context.Context, in *UpdateTestModuleRequest, opts ...grpc.CallOption) (*UpdateTestModuleReply, error)
	DeleteTestModule(ctx context.Context, in *DeleteTestModuleRequest, opts ...grpc.CallOption) (*DeleteTestModuleReply, error)
	GetTestModule(ctx context.Context, in *GetTestModuleRequest, opts ...grpc.CallOption) (*GetTestModuleReply, error)
	ListTestModule(ctx context.Context, in *ListTestModuleRequest, opts ...grpc.CallOption) (*ListTestModuleReply, error)
}

type testModuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestModuleServiceClient(cc grpc.ClientConnInterface) TestModuleServiceClient {
	return &testModuleServiceClient{cc}
}

func (c *testModuleServiceClient) CreateTestModule(ctx context.Context, in *CreateTestModuleRequest, opts ...grpc.CallOption) (*CreateTestModuleReply, error) {
	out := new(CreateTestModuleReply)
	err := c.cc.Invoke(ctx, TestModuleService_CreateTestModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testModuleServiceClient) UpdateTestModule(ctx context.Context, in *UpdateTestModuleRequest, opts ...grpc.CallOption) (*UpdateTestModuleReply, error) {
	out := new(UpdateTestModuleReply)
	err := c.cc.Invoke(ctx, TestModuleService_UpdateTestModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testModuleServiceClient) DeleteTestModule(ctx context.Context, in *DeleteTestModuleRequest, opts ...grpc.CallOption) (*DeleteTestModuleReply, error) {
	out := new(DeleteTestModuleReply)
	err := c.cc.Invoke(ctx, TestModuleService_DeleteTestModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testModuleServiceClient) GetTestModule(ctx context.Context, in *GetTestModuleRequest, opts ...grpc.CallOption) (*GetTestModuleReply, error) {
	out := new(GetTestModuleReply)
	err := c.cc.Invoke(ctx, TestModuleService_GetTestModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testModuleServiceClient) ListTestModule(ctx context.Context, in *ListTestModuleRequest, opts ...grpc.CallOption) (*ListTestModuleReply, error) {
	out := new(ListTestModuleReply)
	err := c.cc.Invoke(ctx, TestModuleService_ListTestModule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestModuleServiceServer is the server API for TestModuleService service.
// All implementations must embed UnimplementedTestModuleServiceServer
// for forward compatibility
type TestModuleServiceServer interface {
	CreateTestModule(context.Context, *CreateTestModuleRequest) (*CreateTestModuleReply, error)
	UpdateTestModule(context.Context, *UpdateTestModuleRequest) (*UpdateTestModuleReply, error)
	DeleteTestModule(context.Context, *DeleteTestModuleRequest) (*DeleteTestModuleReply, error)
	GetTestModule(context.Context, *GetTestModuleRequest) (*GetTestModuleReply, error)
	ListTestModule(context.Context, *ListTestModuleRequest) (*ListTestModuleReply, error)
	mustEmbedUnimplementedTestModuleServiceServer()
}

// UnimplementedTestModuleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestModuleServiceServer struct {
}

func (UnimplementedTestModuleServiceServer) CreateTestModule(context.Context, *CreateTestModuleRequest) (*CreateTestModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestModule not implemented")
}
func (UnimplementedTestModuleServiceServer) UpdateTestModule(context.Context, *UpdateTestModuleRequest) (*UpdateTestModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestModule not implemented")
}
func (UnimplementedTestModuleServiceServer) DeleteTestModule(context.Context, *DeleteTestModuleRequest) (*DeleteTestModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestModule not implemented")
}
func (UnimplementedTestModuleServiceServer) GetTestModule(context.Context, *GetTestModuleRequest) (*GetTestModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestModule not implemented")
}
func (UnimplementedTestModuleServiceServer) ListTestModule(context.Context, *ListTestModuleRequest) (*ListTestModuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestModule not implemented")
}
func (UnimplementedTestModuleServiceServer) mustEmbedUnimplementedTestModuleServiceServer() {}

// UnsafeTestModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestModuleServiceServer will
// result in compilation errors.
type UnsafeTestModuleServiceServer interface {
	mustEmbedUnimplementedTestModuleServiceServer()
}

func RegisterTestModuleServiceServer(s grpc.ServiceRegistrar, srv TestModuleServiceServer) {
	s.RegisterService(&TestModuleService_ServiceDesc, srv)
}

func _TestModuleService_CreateTestModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestModuleServiceServer).CreateTestModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestModuleService_CreateTestModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestModuleServiceServer).CreateTestModule(ctx, req.(*CreateTestModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestModuleService_UpdateTestModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestModuleServiceServer).UpdateTestModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestModuleService_UpdateTestModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestModuleServiceServer).UpdateTestModule(ctx, req.(*UpdateTestModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestModuleService_DeleteTestModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestModuleServiceServer).DeleteTestModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestModuleService_DeleteTestModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestModuleServiceServer).DeleteTestModule(ctx, req.(*DeleteTestModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestModuleService_GetTestModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestModuleServiceServer).GetTestModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestModuleService_GetTestModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestModuleServiceServer).GetTestModule(ctx, req.(*GetTestModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestModuleService_ListTestModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestModuleServiceServer).ListTestModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestModuleService_ListTestModule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestModuleServiceServer).ListTestModule(ctx, req.(*ListTestModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestModuleService_ServiceDesc is the grpc.ServiceDesc for TestModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terminator.api.test.v1.TestModuleService",
	HandlerType: (*TestModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestModule",
			Handler:    _TestModuleService_CreateTestModule_Handler,
		},
		{
			MethodName: "UpdateTestModule",
			Handler:    _TestModuleService_UpdateTestModule_Handler,
		},
		{
			MethodName: "DeleteTestModule",
			Handler:    _TestModuleService_DeleteTestModule_Handler,
		},
		{
			MethodName: "GetTestModule",
			Handler:    _TestModuleService_GetTestModule_Handler,
		},
		{
			MethodName: "ListTestModule",
			Handler:    _TestModuleService_ListTestModule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/test/v1/module.proto",
}
