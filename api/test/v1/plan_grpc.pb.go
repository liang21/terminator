// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/test/v1/plan.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlanService_CreateTestPlan_FullMethodName = "/terminator.api.test.v1.PlanService/CreateTestPlan"
	PlanService_UpdateTestPlan_FullMethodName = "/terminator.api.test.v1.PlanService/UpdateTestPlan"
	PlanService_DeleteTestPlan_FullMethodName = "/terminator.api.test.v1.PlanService/DeleteTestPlan"
	PlanService_GetTestPlan_FullMethodName    = "/terminator.api.test.v1.PlanService/GetTestPlan"
	PlanService_ListTestPlan_FullMethodName   = "/terminator.api.test.v1.PlanService/ListTestPlan"
)

// PlanServiceClient is the client API for PlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanServiceClient interface {
	CreateTestPlan(ctx context.Context, in *CreateTestPlanRequest, opts ...grpc.CallOption) (*CreateTestPlanReply, error)
	UpdateTestPlan(ctx context.Context, in *UpdateTestPlanRequest, opts ...grpc.CallOption) (*UpdateTestPlanReply, error)
	DeleteTestPlan(ctx context.Context, in *DeleteTestPlanRequest, opts ...grpc.CallOption) (*DeleteTestPlanReply, error)
	GetTestPlan(ctx context.Context, in *GetTestPlanRequest, opts ...grpc.CallOption) (*GetTestPlanReply, error)
	ListTestPlan(ctx context.Context, in *ListTestPlanRequest, opts ...grpc.CallOption) (*ListTestPlanReply, error)
}

type planServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanServiceClient(cc grpc.ClientConnInterface) PlanServiceClient {
	return &planServiceClient{cc}
}

func (c *planServiceClient) CreateTestPlan(ctx context.Context, in *CreateTestPlanRequest, opts ...grpc.CallOption) (*CreateTestPlanReply, error) {
	out := new(CreateTestPlanReply)
	err := c.cc.Invoke(ctx, PlanService_CreateTestPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UpdateTestPlan(ctx context.Context, in *UpdateTestPlanRequest, opts ...grpc.CallOption) (*UpdateTestPlanReply, error) {
	out := new(UpdateTestPlanReply)
	err := c.cc.Invoke(ctx, PlanService_UpdateTestPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) DeleteTestPlan(ctx context.Context, in *DeleteTestPlanRequest, opts ...grpc.CallOption) (*DeleteTestPlanReply, error) {
	out := new(DeleteTestPlanReply)
	err := c.cc.Invoke(ctx, PlanService_DeleteTestPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) GetTestPlan(ctx context.Context, in *GetTestPlanRequest, opts ...grpc.CallOption) (*GetTestPlanReply, error) {
	out := new(GetTestPlanReply)
	err := c.cc.Invoke(ctx, PlanService_GetTestPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) ListTestPlan(ctx context.Context, in *ListTestPlanRequest, opts ...grpc.CallOption) (*ListTestPlanReply, error) {
	out := new(ListTestPlanReply)
	err := c.cc.Invoke(ctx, PlanService_ListTestPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanServiceServer is the server API for PlanService service.
// All implementations must embed UnimplementedPlanServiceServer
// for forward compatibility
type PlanServiceServer interface {
	CreateTestPlan(context.Context, *CreateTestPlanRequest) (*CreateTestPlanReply, error)
	UpdateTestPlan(context.Context, *UpdateTestPlanRequest) (*UpdateTestPlanReply, error)
	DeleteTestPlan(context.Context, *DeleteTestPlanRequest) (*DeleteTestPlanReply, error)
	GetTestPlan(context.Context, *GetTestPlanRequest) (*GetTestPlanReply, error)
	ListTestPlan(context.Context, *ListTestPlanRequest) (*ListTestPlanReply, error)
	mustEmbedUnimplementedPlanServiceServer()
}

// UnimplementedPlanServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlanServiceServer struct {
}

func (UnimplementedPlanServiceServer) CreateTestPlan(context.Context, *CreateTestPlanRequest) (*CreateTestPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestPlan not implemented")
}
func (UnimplementedPlanServiceServer) UpdateTestPlan(context.Context, *UpdateTestPlanRequest) (*UpdateTestPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestPlan not implemented")
}
func (UnimplementedPlanServiceServer) DeleteTestPlan(context.Context, *DeleteTestPlanRequest) (*DeleteTestPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestPlan not implemented")
}
func (UnimplementedPlanServiceServer) GetTestPlan(context.Context, *GetTestPlanRequest) (*GetTestPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestPlan not implemented")
}
func (UnimplementedPlanServiceServer) ListTestPlan(context.Context, *ListTestPlanRequest) (*ListTestPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestPlan not implemented")
}
func (UnimplementedPlanServiceServer) mustEmbedUnimplementedPlanServiceServer() {}

// UnsafePlanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanServiceServer will
// result in compilation errors.
type UnsafePlanServiceServer interface {
	mustEmbedUnimplementedPlanServiceServer()
}

func RegisterPlanServiceServer(s grpc.ServiceRegistrar, srv PlanServiceServer) {
	s.RegisterService(&PlanService_ServiceDesc, srv)
}

func _PlanService_CreateTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).CreateTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_CreateTestPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).CreateTestPlan(ctx, req.(*CreateTestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_UpdateTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).UpdateTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_UpdateTestPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).UpdateTestPlan(ctx, req.(*UpdateTestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_DeleteTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).DeleteTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_DeleteTestPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).DeleteTestPlan(ctx, req.(*DeleteTestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_GetTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).GetTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_GetTestPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).GetTestPlan(ctx, req.(*GetTestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_ListTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).ListTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_ListTestPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).ListTestPlan(ctx, req.(*ListTestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanService_ServiceDesc is the grpc.ServiceDesc for PlanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terminator.api.test.v1.PlanService",
	HandlerType: (*PlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestPlan",
			Handler:    _PlanService_CreateTestPlan_Handler,
		},
		{
			MethodName: "UpdateTestPlan",
			Handler:    _PlanService_UpdateTestPlan_Handler,
		},
		{
			MethodName: "DeleteTestPlan",
			Handler:    _PlanService_DeleteTestPlan_Handler,
		},
		{
			MethodName: "GetTestPlan",
			Handler:    _PlanService_GetTestPlan_Handler,
		},
		{
			MethodName: "ListTestPlan",
			Handler:    _PlanService_ListTestPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/test/v1/plan.proto",
}

const (
	TestPlanCaseService_CreateTestPlanCase_FullMethodName = "/terminator.api.test.v1.TestPlanCaseService/CreateTestPlanCase"
	TestPlanCaseService_UpdateTestPlanCase_FullMethodName = "/terminator.api.test.v1.TestPlanCaseService/UpdateTestPlanCase"
	TestPlanCaseService_DeleteTestPlanCase_FullMethodName = "/terminator.api.test.v1.TestPlanCaseService/DeleteTestPlanCase"
	TestPlanCaseService_GetTestPlanCase_FullMethodName    = "/terminator.api.test.v1.TestPlanCaseService/GetTestPlanCase"
	TestPlanCaseService_ListTestPlanCase_FullMethodName   = "/terminator.api.test.v1.TestPlanCaseService/ListTestPlanCase"
)

// TestPlanCaseServiceClient is the client API for TestPlanCaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestPlanCaseServiceClient interface {
	CreateTestPlanCase(ctx context.Context, in *CreateTestPlanCaseRequest, opts ...grpc.CallOption) (*CreateTestPlanCaseReply, error)
	UpdateTestPlanCase(ctx context.Context, in *UpdateTestPlanCaseRequest, opts ...grpc.CallOption) (*UpdateTestPlanCaseReply, error)
	DeleteTestPlanCase(ctx context.Context, in *DeleteTestPlanCaseRequest, opts ...grpc.CallOption) (*DeleteTestPlanCaseReply, error)
	GetTestPlanCase(ctx context.Context, in *GetTestPlanCaseRequest, opts ...grpc.CallOption) (*GetTestPlanCaseReply, error)
	ListTestPlanCase(ctx context.Context, in *ListTestPlanCaseRequest, opts ...grpc.CallOption) (*ListTestPlanCaseReply, error)
}

type testPlanCaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestPlanCaseServiceClient(cc grpc.ClientConnInterface) TestPlanCaseServiceClient {
	return &testPlanCaseServiceClient{cc}
}

func (c *testPlanCaseServiceClient) CreateTestPlanCase(ctx context.Context, in *CreateTestPlanCaseRequest, opts ...grpc.CallOption) (*CreateTestPlanCaseReply, error) {
	out := new(CreateTestPlanCaseReply)
	err := c.cc.Invoke(ctx, TestPlanCaseService_CreateTestPlanCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPlanCaseServiceClient) UpdateTestPlanCase(ctx context.Context, in *UpdateTestPlanCaseRequest, opts ...grpc.CallOption) (*UpdateTestPlanCaseReply, error) {
	out := new(UpdateTestPlanCaseReply)
	err := c.cc.Invoke(ctx, TestPlanCaseService_UpdateTestPlanCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPlanCaseServiceClient) DeleteTestPlanCase(ctx context.Context, in *DeleteTestPlanCaseRequest, opts ...grpc.CallOption) (*DeleteTestPlanCaseReply, error) {
	out := new(DeleteTestPlanCaseReply)
	err := c.cc.Invoke(ctx, TestPlanCaseService_DeleteTestPlanCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPlanCaseServiceClient) GetTestPlanCase(ctx context.Context, in *GetTestPlanCaseRequest, opts ...grpc.CallOption) (*GetTestPlanCaseReply, error) {
	out := new(GetTestPlanCaseReply)
	err := c.cc.Invoke(ctx, TestPlanCaseService_GetTestPlanCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testPlanCaseServiceClient) ListTestPlanCase(ctx context.Context, in *ListTestPlanCaseRequest, opts ...grpc.CallOption) (*ListTestPlanCaseReply, error) {
	out := new(ListTestPlanCaseReply)
	err := c.cc.Invoke(ctx, TestPlanCaseService_ListTestPlanCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestPlanCaseServiceServer is the server API for TestPlanCaseService service.
// All implementations must embed UnimplementedTestPlanCaseServiceServer
// for forward compatibility
type TestPlanCaseServiceServer interface {
	CreateTestPlanCase(context.Context, *CreateTestPlanCaseRequest) (*CreateTestPlanCaseReply, error)
	UpdateTestPlanCase(context.Context, *UpdateTestPlanCaseRequest) (*UpdateTestPlanCaseReply, error)
	DeleteTestPlanCase(context.Context, *DeleteTestPlanCaseRequest) (*DeleteTestPlanCaseReply, error)
	GetTestPlanCase(context.Context, *GetTestPlanCaseRequest) (*GetTestPlanCaseReply, error)
	ListTestPlanCase(context.Context, *ListTestPlanCaseRequest) (*ListTestPlanCaseReply, error)
	mustEmbedUnimplementedTestPlanCaseServiceServer()
}

// UnimplementedTestPlanCaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestPlanCaseServiceServer struct {
}

func (UnimplementedTestPlanCaseServiceServer) CreateTestPlanCase(context.Context, *CreateTestPlanCaseRequest) (*CreateTestPlanCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestPlanCase not implemented")
}
func (UnimplementedTestPlanCaseServiceServer) UpdateTestPlanCase(context.Context, *UpdateTestPlanCaseRequest) (*UpdateTestPlanCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestPlanCase not implemented")
}
func (UnimplementedTestPlanCaseServiceServer) DeleteTestPlanCase(context.Context, *DeleteTestPlanCaseRequest) (*DeleteTestPlanCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestPlanCase not implemented")
}
func (UnimplementedTestPlanCaseServiceServer) GetTestPlanCase(context.Context, *GetTestPlanCaseRequest) (*GetTestPlanCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestPlanCase not implemented")
}
func (UnimplementedTestPlanCaseServiceServer) ListTestPlanCase(context.Context, *ListTestPlanCaseRequest) (*ListTestPlanCaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestPlanCase not implemented")
}
func (UnimplementedTestPlanCaseServiceServer) mustEmbedUnimplementedTestPlanCaseServiceServer() {}

// UnsafeTestPlanCaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestPlanCaseServiceServer will
// result in compilation errors.
type UnsafeTestPlanCaseServiceServer interface {
	mustEmbedUnimplementedTestPlanCaseServiceServer()
}

func RegisterTestPlanCaseServiceServer(s grpc.ServiceRegistrar, srv TestPlanCaseServiceServer) {
	s.RegisterService(&TestPlanCaseService_ServiceDesc, srv)
}

func _TestPlanCaseService_CreateTestPlanCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestPlanCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPlanCaseServiceServer).CreateTestPlanCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestPlanCaseService_CreateTestPlanCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPlanCaseServiceServer).CreateTestPlanCase(ctx, req.(*CreateTestPlanCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPlanCaseService_UpdateTestPlanCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestPlanCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPlanCaseServiceServer).UpdateTestPlanCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestPlanCaseService_UpdateTestPlanCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPlanCaseServiceServer).UpdateTestPlanCase(ctx, req.(*UpdateTestPlanCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPlanCaseService_DeleteTestPlanCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestPlanCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPlanCaseServiceServer).DeleteTestPlanCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestPlanCaseService_DeleteTestPlanCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPlanCaseServiceServer).DeleteTestPlanCase(ctx, req.(*DeleteTestPlanCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPlanCaseService_GetTestPlanCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestPlanCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPlanCaseServiceServer).GetTestPlanCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestPlanCaseService_GetTestPlanCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPlanCaseServiceServer).GetTestPlanCase(ctx, req.(*GetTestPlanCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestPlanCaseService_ListTestPlanCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestPlanCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPlanCaseServiceServer).ListTestPlanCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestPlanCaseService_ListTestPlanCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPlanCaseServiceServer).ListTestPlanCase(ctx, req.(*ListTestPlanCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestPlanCaseService_ServiceDesc is the grpc.ServiceDesc for TestPlanCaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestPlanCaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terminator.api.test.v1.TestPlanCaseService",
	HandlerType: (*TestPlanCaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestPlanCase",
			Handler:    _TestPlanCaseService_CreateTestPlanCase_Handler,
		},
		{
			MethodName: "UpdateTestPlanCase",
			Handler:    _TestPlanCaseService_UpdateTestPlanCase_Handler,
		},
		{
			MethodName: "DeleteTestPlanCase",
			Handler:    _TestPlanCaseService_DeleteTestPlanCase_Handler,
		},
		{
			MethodName: "GetTestPlanCase",
			Handler:    _TestPlanCaseService_GetTestPlanCase_Handler,
		},
		{
			MethodName: "ListTestPlanCase",
			Handler:    _TestPlanCaseService_ListTestPlanCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/test/v1/plan.proto",
}

const (
	TestPlanReportService_GetTestPlanReport_FullMethodName = "/terminator.api.test.v1.TestPlanReportService/GetTestPlanReport"
)

// TestPlanReportServiceClient is the client API for TestPlanReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestPlanReportServiceClient interface {
	GetTestPlanReport(ctx context.Context, in *GetTestPlanReportRequest, opts ...grpc.CallOption) (*GetTestPlanReportReply, error)
}

type testPlanReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestPlanReportServiceClient(cc grpc.ClientConnInterface) TestPlanReportServiceClient {
	return &testPlanReportServiceClient{cc}
}

func (c *testPlanReportServiceClient) GetTestPlanReport(ctx context.Context, in *GetTestPlanReportRequest, opts ...grpc.CallOption) (*GetTestPlanReportReply, error) {
	out := new(GetTestPlanReportReply)
	err := c.cc.Invoke(ctx, TestPlanReportService_GetTestPlanReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestPlanReportServiceServer is the server API for TestPlanReportService service.
// All implementations must embed UnimplementedTestPlanReportServiceServer
// for forward compatibility
type TestPlanReportServiceServer interface {
	GetTestPlanReport(context.Context, *GetTestPlanReportRequest) (*GetTestPlanReportReply, error)
	mustEmbedUnimplementedTestPlanReportServiceServer()
}

// UnimplementedTestPlanReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestPlanReportServiceServer struct {
}

func (UnimplementedTestPlanReportServiceServer) GetTestPlanReport(context.Context, *GetTestPlanReportRequest) (*GetTestPlanReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestPlanReport not implemented")
}
func (UnimplementedTestPlanReportServiceServer) mustEmbedUnimplementedTestPlanReportServiceServer() {}

// UnsafeTestPlanReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestPlanReportServiceServer will
// result in compilation errors.
type UnsafeTestPlanReportServiceServer interface {
	mustEmbedUnimplementedTestPlanReportServiceServer()
}

func RegisterTestPlanReportServiceServer(s grpc.ServiceRegistrar, srv TestPlanReportServiceServer) {
	s.RegisterService(&TestPlanReportService_ServiceDesc, srv)
}

func _TestPlanReportService_GetTestPlanReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestPlanReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestPlanReportServiceServer).GetTestPlanReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestPlanReportService_GetTestPlanReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestPlanReportServiceServer).GetTestPlanReport(ctx, req.(*GetTestPlanReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestPlanReportService_ServiceDesc is the grpc.ServiceDesc for TestPlanReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestPlanReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "terminator.api.test.v1.TestPlanReportService",
	HandlerType: (*TestPlanReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTestPlanReport",
			Handler:    _TestPlanReportService_GetTestPlanReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/test/v1/plan.proto",
}
